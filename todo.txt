2022-08-26
- V1_1__create_tables.sql
   - вырезать команды создания таблиц для 64 региона (+)
   - создать справочную таблицу с кодами регионов (+)
   - заполнить ее (сделать инсерты и прогнать) (+)
   - создать ХП которая пройдет по таблице и создаст набор необходимых таблиц по каждому региону (+)
- V3__add_indexes.sql - убрать (+)
- V2__stored_procedure_to_delete_extra_data.sql
   - house_types и apartment_types - это короткие справочники ->
     - не надо им приделывать динамически констрайнты (+)
     - вернуть констрайнты им в V1_1__create_tables.sql (+)
   - для delete_extra_data передать параметр кода региона (+)
   - опираясь на параметр и динамический sql (EXECUTE ) создать для региона сонстрайнты и индексы (+)
   - delete_extra_data переименовать в after_full_import (+)
   - сделать процедуру before_full_import которая уберет констрайнты с региона и удалит индексы

- инсерты в регионы надо строить динамически в коде или же например использовать файл insert_into_addr_objects.sql
  в java как шаблон и подменять XXX кодом региона (на лету)
- XmlParserManager
   - чтение sql (из ресурсов) выполняется через SystemClassLoader - примеров полно
   - new File("E:/gar_xml/  - для эксплуатации удобнее завести настроченую таблицу из которой считывать каталог
     размещения XML и заполнять переменную проекта. А по дефолту записывать в эту переменную: E:/gar_xml/
- DBCPDataSource - непонятная вещь - в серверах приложения настраивается доступ к БД, а в приложении ты просто берешь dataSource
- AddressObjectsRc64Repository и т.п. классы - SELECT надо брать с родительской таблицы с добавочным where на код региона -
  там postgres сам уже понимает с какой таблицы вытащить данные -> не надо лепить на запросы классы для каждого региона
- AdmHierarchyRc64 - см выше
- AddressSearcherControllerRc64 код региона передавать параметром - не надо под каждый регион делать свой end point



